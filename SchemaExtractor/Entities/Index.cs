using System.Collections.Generic;

namespace SchemaExtractor.Entities
{
    public class Index
    {
        /// <Summary>
        /// The Unique Name Of The Index Specified By The User Or Automatically Generated By The System
        /// </Summary>
        public string RdbIndexName { get; set; }
        /// <Summary>
        /// The Name Of The Table To Which The Index Belongs. It Corresponds To An Identifier In RdbRelationName.RdbRelations
        /// </Summary>
        public string RdbRelationName { get; set; }
        /// <Summary>
        /// The internal (System) Identifier Of The Index
        /// </Summary>
        public int? RdbIndexId { get; set; }
        /// <Summary>
        /// Specifies Whether The Index Is Unique:
        /// </Summary>
        public bool? RdbUniqueFlag { get; set; }
        /// <Summary>
        /// Could Store Comments Concerning The Index
        /// </Summary>
        //public string RdbDescription { get; set; }
        /// <Summary>
        /// The Number Of Segments (Columns) In The Index
        /// </Summary>
        public int? RdbSegmentCount { get; set; }
        /// <Summary>
        /// Indicates Whether The Index Is Currently Active:
        /// </Summary>
        public int? RdbIndexInactive { get; set; }
        /// <Summary>
        /// Distinguishes Between An Expression Index (1) And A Regular Index (0 Or Null). Not Used In Databases Created Before Firebird 2.0; Hence, Regular Indexes In Upgraded Databases Are More More Likely To Store Null In This Column
        /// </Summary>
        public int? RdbIndexType { get; set; }
        /// <Summary>
        /// The Name Of The Associated Foreign Key Constraint, If Any
        /// </Summary>
        public string RdbForeignKey { get; set; }
        /// <Summary>
        /// Indicates Whether The Index Is System-Defined Or User-Defined:
        /// </Summary>
        public int? RdbSystemFlag { get; set; }
        /// <Summary>
        /// Expression For An Expression Index, Written In The Binary Language Representation (Blr), Used For Calculating The Values For The Index At Runtime.
        /// </Summary>
        public string RdbExpressionBlr {get; set;}
        /// <Summary>
        /// The Source Code Of The Expression For An Expression Index
        /// </Summary>
        public string RdbExpressionSource { get; set; }
        /// <Summary>
        /// Stores The Last Known Selectivity Of The Entire Index, Calculated By Execution Of A set Statistics Statement Over The Index. It Is Also Recalculated Whenever The Database Is First Opened By The Server. The Selectivity Of Each Separate Segment Of The Index Is Stored In RdbIndexSegments.
        /// </Summary>
        //public int? RdbStatistics { get; set; }

        public virtual Relation RdbRelation { get; set; }

        public ICollection<IndexSegment> RdbIndexSegments { get; set; }

        public string FormatName()
        {
            return (RdbIndexName ?? string.Empty).Trim();
        }
        public string FormatRelationName()
        {
            return (RdbRelationName ?? string.Empty).Trim();
        }
    }
}
